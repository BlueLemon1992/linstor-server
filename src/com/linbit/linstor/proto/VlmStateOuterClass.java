// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/VlmState.proto

package com.linbit.linstor.proto;

public final class VlmStateOuterClass {
  private VlmStateOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface VlmStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.linbit.linstor.proto.VlmState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required sint32 vlm_nr = 1;</code>
     */
    boolean hasVlmNr();
    /**
     * <code>required sint32 vlm_nr = 1;</code>
     */
    int getVlmNr();

    /**
     * <code>required sint32 vlm_minor_nr = 2;</code>
     */
    boolean hasVlmMinorNr();
    /**
     * <code>required sint32 vlm_minor_nr = 2;</code>
     */
    int getVlmMinorNr();

    /**
     * <code>required bool is_present = 3;</code>
     */
    boolean hasIsPresent();
    /**
     * <code>required bool is_present = 3;</code>
     */
    boolean getIsPresent();

    /**
     * <code>required bool has_disk = 4;</code>
     */
    boolean hasHasDisk();
    /**
     * <code>required bool has_disk = 4;</code>
     */
    boolean getHasDisk();

    /**
     * <code>required bool has_meta_data = 5;</code>
     */
    boolean hasHasMetaData();
    /**
     * <code>required bool has_meta_data = 5;</code>
     */
    boolean getHasMetaData();

    /**
     * <code>required bool check_meta_data = 6;</code>
     */
    boolean hasCheckMetaData();
    /**
     * <code>required bool check_meta_data = 6;</code>
     */
    boolean getCheckMetaData();

    /**
     * <code>required bool disk_failed = 7;</code>
     */
    boolean hasDiskFailed();
    /**
     * <code>required bool disk_failed = 7;</code>
     */
    boolean getDiskFailed();

    /**
     * <code>required uint64 net_size = 8;</code>
     */
    boolean hasNetSize();
    /**
     * <code>required uint64 net_size = 8;</code>
     */
    long getNetSize();

    /**
     * <code>required uint64 gross_size = 9;</code>
     */
    boolean hasGrossSize();
    /**
     * <code>required uint64 gross_size = 9;</code>
     */
    long getGrossSize();
  }
  /**
   * Protobuf type {@code com.linbit.linstor.proto.VlmState}
   */
  public  static final class VlmState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.linbit.linstor.proto.VlmState)
      VlmStateOrBuilder {
    // Use VlmState.newBuilder() to construct.
    private VlmState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private VlmState() {
      vlmNr_ = 0;
      vlmMinorNr_ = 0;
      isPresent_ = false;
      hasDisk_ = false;
      hasMetaData_ = false;
      checkMetaData_ = false;
      diskFailed_ = false;
      netSize_ = 0L;
      grossSize_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private VlmState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              vlmNr_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              vlmMinorNr_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              isPresent_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              hasDisk_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              hasMetaData_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              checkMetaData_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              diskFailed_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              netSize_ = input.readUInt64();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              grossSize_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.linbit.linstor.proto.VlmStateOuterClass.internal_static_com_linbit_linstor_proto_VlmState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.linbit.linstor.proto.VlmStateOuterClass.internal_static_com_linbit_linstor_proto_VlmState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.linbit.linstor.proto.VlmStateOuterClass.VlmState.class, com.linbit.linstor.proto.VlmStateOuterClass.VlmState.Builder.class);
    }

    private int bitField0_;
    public static final int VLM_NR_FIELD_NUMBER = 1;
    private int vlmNr_;
    /**
     * <code>required sint32 vlm_nr = 1;</code>
     */
    public boolean hasVlmNr() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 vlm_nr = 1;</code>
     */
    public int getVlmNr() {
      return vlmNr_;
    }

    public static final int VLM_MINOR_NR_FIELD_NUMBER = 2;
    private int vlmMinorNr_;
    /**
     * <code>required sint32 vlm_minor_nr = 2;</code>
     */
    public boolean hasVlmMinorNr() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 vlm_minor_nr = 2;</code>
     */
    public int getVlmMinorNr() {
      return vlmMinorNr_;
    }

    public static final int IS_PRESENT_FIELD_NUMBER = 3;
    private boolean isPresent_;
    /**
     * <code>required bool is_present = 3;</code>
     */
    public boolean hasIsPresent() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bool is_present = 3;</code>
     */
    public boolean getIsPresent() {
      return isPresent_;
    }

    public static final int HAS_DISK_FIELD_NUMBER = 4;
    private boolean hasDisk_;
    /**
     * <code>required bool has_disk = 4;</code>
     */
    public boolean hasHasDisk() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bool has_disk = 4;</code>
     */
    public boolean getHasDisk() {
      return hasDisk_;
    }

    public static final int HAS_META_DATA_FIELD_NUMBER = 5;
    private boolean hasMetaData_;
    /**
     * <code>required bool has_meta_data = 5;</code>
     */
    public boolean hasHasMetaData() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool has_meta_data = 5;</code>
     */
    public boolean getHasMetaData() {
      return hasMetaData_;
    }

    public static final int CHECK_META_DATA_FIELD_NUMBER = 6;
    private boolean checkMetaData_;
    /**
     * <code>required bool check_meta_data = 6;</code>
     */
    public boolean hasCheckMetaData() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bool check_meta_data = 6;</code>
     */
    public boolean getCheckMetaData() {
      return checkMetaData_;
    }

    public static final int DISK_FAILED_FIELD_NUMBER = 7;
    private boolean diskFailed_;
    /**
     * <code>required bool disk_failed = 7;</code>
     */
    public boolean hasDiskFailed() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool disk_failed = 7;</code>
     */
    public boolean getDiskFailed() {
      return diskFailed_;
    }

    public static final int NET_SIZE_FIELD_NUMBER = 8;
    private long netSize_;
    /**
     * <code>required uint64 net_size = 8;</code>
     */
    public boolean hasNetSize() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required uint64 net_size = 8;</code>
     */
    public long getNetSize() {
      return netSize_;
    }

    public static final int GROSS_SIZE_FIELD_NUMBER = 9;
    private long grossSize_;
    /**
     * <code>required uint64 gross_size = 9;</code>
     */
    public boolean hasGrossSize() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required uint64 gross_size = 9;</code>
     */
    public long getGrossSize() {
      return grossSize_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasVlmNr()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasVlmMinorNr()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsPresent()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHasDisk()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHasMetaData()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCheckMetaData()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasDiskFailed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNetSize()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGrossSize()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, vlmNr_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, vlmMinorNr_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, isPresent_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, hasDisk_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, hasMetaData_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, checkMetaData_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, diskFailed_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt64(8, netSize_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt64(9, grossSize_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, vlmNr_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, vlmMinorNr_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, isPresent_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, hasDisk_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, hasMetaData_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, checkMetaData_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, diskFailed_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, netSize_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(9, grossSize_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.linbit.linstor.proto.VlmStateOuterClass.VlmState)) {
        return super.equals(obj);
      }
      com.linbit.linstor.proto.VlmStateOuterClass.VlmState other = (com.linbit.linstor.proto.VlmStateOuterClass.VlmState) obj;

      boolean result = true;
      result = result && (hasVlmNr() == other.hasVlmNr());
      if (hasVlmNr()) {
        result = result && (getVlmNr()
            == other.getVlmNr());
      }
      result = result && (hasVlmMinorNr() == other.hasVlmMinorNr());
      if (hasVlmMinorNr()) {
        result = result && (getVlmMinorNr()
            == other.getVlmMinorNr());
      }
      result = result && (hasIsPresent() == other.hasIsPresent());
      if (hasIsPresent()) {
        result = result && (getIsPresent()
            == other.getIsPresent());
      }
      result = result && (hasHasDisk() == other.hasHasDisk());
      if (hasHasDisk()) {
        result = result && (getHasDisk()
            == other.getHasDisk());
      }
      result = result && (hasHasMetaData() == other.hasHasMetaData());
      if (hasHasMetaData()) {
        result = result && (getHasMetaData()
            == other.getHasMetaData());
      }
      result = result && (hasCheckMetaData() == other.hasCheckMetaData());
      if (hasCheckMetaData()) {
        result = result && (getCheckMetaData()
            == other.getCheckMetaData());
      }
      result = result && (hasDiskFailed() == other.hasDiskFailed());
      if (hasDiskFailed()) {
        result = result && (getDiskFailed()
            == other.getDiskFailed());
      }
      result = result && (hasNetSize() == other.hasNetSize());
      if (hasNetSize()) {
        result = result && (getNetSize()
            == other.getNetSize());
      }
      result = result && (hasGrossSize() == other.hasGrossSize());
      if (hasGrossSize()) {
        result = result && (getGrossSize()
            == other.getGrossSize());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasVlmNr()) {
        hash = (37 * hash) + VLM_NR_FIELD_NUMBER;
        hash = (53 * hash) + getVlmNr();
      }
      if (hasVlmMinorNr()) {
        hash = (37 * hash) + VLM_MINOR_NR_FIELD_NUMBER;
        hash = (53 * hash) + getVlmMinorNr();
      }
      if (hasIsPresent()) {
        hash = (37 * hash) + IS_PRESENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsPresent());
      }
      if (hasHasDisk()) {
        hash = (37 * hash) + HAS_DISK_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHasDisk());
      }
      if (hasHasMetaData()) {
        hash = (37 * hash) + HAS_META_DATA_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getHasMetaData());
      }
      if (hasCheckMetaData()) {
        hash = (37 * hash) + CHECK_META_DATA_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getCheckMetaData());
      }
      if (hasDiskFailed()) {
        hash = (37 * hash) + DISK_FAILED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDiskFailed());
      }
      if (hasNetSize()) {
        hash = (37 * hash) + NET_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getNetSize());
      }
      if (hasGrossSize()) {
        hash = (37 * hash) + GROSS_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getGrossSize());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.linbit.linstor.proto.VlmStateOuterClass.VlmState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.linbit.linstor.proto.VlmStateOuterClass.VlmState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.linbit.linstor.proto.VlmStateOuterClass.VlmState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.linbit.linstor.proto.VlmStateOuterClass.VlmState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.linbit.linstor.proto.VlmStateOuterClass.VlmState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.linbit.linstor.proto.VlmStateOuterClass.VlmState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.linbit.linstor.proto.VlmStateOuterClass.VlmState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.linbit.linstor.proto.VlmStateOuterClass.VlmState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.linbit.linstor.proto.VlmStateOuterClass.VlmState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.linbit.linstor.proto.VlmStateOuterClass.VlmState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.linbit.linstor.proto.VlmStateOuterClass.VlmState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.linbit.linstor.proto.VlmState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.linbit.linstor.proto.VlmState)
        com.linbit.linstor.proto.VlmStateOuterClass.VlmStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.linbit.linstor.proto.VlmStateOuterClass.internal_static_com_linbit_linstor_proto_VlmState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.linbit.linstor.proto.VlmStateOuterClass.internal_static_com_linbit_linstor_proto_VlmState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.linbit.linstor.proto.VlmStateOuterClass.VlmState.class, com.linbit.linstor.proto.VlmStateOuterClass.VlmState.Builder.class);
      }

      // Construct using com.linbit.linstor.proto.VlmStateOuterClass.VlmState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        vlmNr_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        vlmMinorNr_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        isPresent_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        hasDisk_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        hasMetaData_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        checkMetaData_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        diskFailed_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        netSize_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        grossSize_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.linbit.linstor.proto.VlmStateOuterClass.internal_static_com_linbit_linstor_proto_VlmState_descriptor;
      }

      public com.linbit.linstor.proto.VlmStateOuterClass.VlmState getDefaultInstanceForType() {
        return com.linbit.linstor.proto.VlmStateOuterClass.VlmState.getDefaultInstance();
      }

      public com.linbit.linstor.proto.VlmStateOuterClass.VlmState build() {
        com.linbit.linstor.proto.VlmStateOuterClass.VlmState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.linbit.linstor.proto.VlmStateOuterClass.VlmState buildPartial() {
        com.linbit.linstor.proto.VlmStateOuterClass.VlmState result = new com.linbit.linstor.proto.VlmStateOuterClass.VlmState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.vlmNr_ = vlmNr_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.vlmMinorNr_ = vlmMinorNr_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isPresent_ = isPresent_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.hasDisk_ = hasDisk_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.hasMetaData_ = hasMetaData_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.checkMetaData_ = checkMetaData_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.diskFailed_ = diskFailed_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.netSize_ = netSize_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.grossSize_ = grossSize_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.linbit.linstor.proto.VlmStateOuterClass.VlmState) {
          return mergeFrom((com.linbit.linstor.proto.VlmStateOuterClass.VlmState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.linbit.linstor.proto.VlmStateOuterClass.VlmState other) {
        if (other == com.linbit.linstor.proto.VlmStateOuterClass.VlmState.getDefaultInstance()) return this;
        if (other.hasVlmNr()) {
          setVlmNr(other.getVlmNr());
        }
        if (other.hasVlmMinorNr()) {
          setVlmMinorNr(other.getVlmMinorNr());
        }
        if (other.hasIsPresent()) {
          setIsPresent(other.getIsPresent());
        }
        if (other.hasHasDisk()) {
          setHasDisk(other.getHasDisk());
        }
        if (other.hasHasMetaData()) {
          setHasMetaData(other.getHasMetaData());
        }
        if (other.hasCheckMetaData()) {
          setCheckMetaData(other.getCheckMetaData());
        }
        if (other.hasDiskFailed()) {
          setDiskFailed(other.getDiskFailed());
        }
        if (other.hasNetSize()) {
          setNetSize(other.getNetSize());
        }
        if (other.hasGrossSize()) {
          setGrossSize(other.getGrossSize());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVlmNr()) {
          return false;
        }
        if (!hasVlmMinorNr()) {
          return false;
        }
        if (!hasIsPresent()) {
          return false;
        }
        if (!hasHasDisk()) {
          return false;
        }
        if (!hasHasMetaData()) {
          return false;
        }
        if (!hasCheckMetaData()) {
          return false;
        }
        if (!hasDiskFailed()) {
          return false;
        }
        if (!hasNetSize()) {
          return false;
        }
        if (!hasGrossSize()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.linbit.linstor.proto.VlmStateOuterClass.VlmState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.linbit.linstor.proto.VlmStateOuterClass.VlmState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int vlmNr_ ;
      /**
       * <code>required sint32 vlm_nr = 1;</code>
       */
      public boolean hasVlmNr() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 vlm_nr = 1;</code>
       */
      public int getVlmNr() {
        return vlmNr_;
      }
      /**
       * <code>required sint32 vlm_nr = 1;</code>
       */
      public Builder setVlmNr(int value) {
        bitField0_ |= 0x00000001;
        vlmNr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 vlm_nr = 1;</code>
       */
      public Builder clearVlmNr() {
        bitField0_ = (bitField0_ & ~0x00000001);
        vlmNr_ = 0;
        onChanged();
        return this;
      }

      private int vlmMinorNr_ ;
      /**
       * <code>required sint32 vlm_minor_nr = 2;</code>
       */
      public boolean hasVlmMinorNr() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 vlm_minor_nr = 2;</code>
       */
      public int getVlmMinorNr() {
        return vlmMinorNr_;
      }
      /**
       * <code>required sint32 vlm_minor_nr = 2;</code>
       */
      public Builder setVlmMinorNr(int value) {
        bitField0_ |= 0x00000002;
        vlmMinorNr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 vlm_minor_nr = 2;</code>
       */
      public Builder clearVlmMinorNr() {
        bitField0_ = (bitField0_ & ~0x00000002);
        vlmMinorNr_ = 0;
        onChanged();
        return this;
      }

      private boolean isPresent_ ;
      /**
       * <code>required bool is_present = 3;</code>
       */
      public boolean hasIsPresent() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bool is_present = 3;</code>
       */
      public boolean getIsPresent() {
        return isPresent_;
      }
      /**
       * <code>required bool is_present = 3;</code>
       */
      public Builder setIsPresent(boolean value) {
        bitField0_ |= 0x00000004;
        isPresent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool is_present = 3;</code>
       */
      public Builder clearIsPresent() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isPresent_ = false;
        onChanged();
        return this;
      }

      private boolean hasDisk_ ;
      /**
       * <code>required bool has_disk = 4;</code>
       */
      public boolean hasHasDisk() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required bool has_disk = 4;</code>
       */
      public boolean getHasDisk() {
        return hasDisk_;
      }
      /**
       * <code>required bool has_disk = 4;</code>
       */
      public Builder setHasDisk(boolean value) {
        bitField0_ |= 0x00000008;
        hasDisk_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool has_disk = 4;</code>
       */
      public Builder clearHasDisk() {
        bitField0_ = (bitField0_ & ~0x00000008);
        hasDisk_ = false;
        onChanged();
        return this;
      }

      private boolean hasMetaData_ ;
      /**
       * <code>required bool has_meta_data = 5;</code>
       */
      public boolean hasHasMetaData() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bool has_meta_data = 5;</code>
       */
      public boolean getHasMetaData() {
        return hasMetaData_;
      }
      /**
       * <code>required bool has_meta_data = 5;</code>
       */
      public Builder setHasMetaData(boolean value) {
        bitField0_ |= 0x00000010;
        hasMetaData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool has_meta_data = 5;</code>
       */
      public Builder clearHasMetaData() {
        bitField0_ = (bitField0_ & ~0x00000010);
        hasMetaData_ = false;
        onChanged();
        return this;
      }

      private boolean checkMetaData_ ;
      /**
       * <code>required bool check_meta_data = 6;</code>
       */
      public boolean hasCheckMetaData() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bool check_meta_data = 6;</code>
       */
      public boolean getCheckMetaData() {
        return checkMetaData_;
      }
      /**
       * <code>required bool check_meta_data = 6;</code>
       */
      public Builder setCheckMetaData(boolean value) {
        bitField0_ |= 0x00000020;
        checkMetaData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool check_meta_data = 6;</code>
       */
      public Builder clearCheckMetaData() {
        bitField0_ = (bitField0_ & ~0x00000020);
        checkMetaData_ = false;
        onChanged();
        return this;
      }

      private boolean diskFailed_ ;
      /**
       * <code>required bool disk_failed = 7;</code>
       */
      public boolean hasDiskFailed() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool disk_failed = 7;</code>
       */
      public boolean getDiskFailed() {
        return diskFailed_;
      }
      /**
       * <code>required bool disk_failed = 7;</code>
       */
      public Builder setDiskFailed(boolean value) {
        bitField0_ |= 0x00000040;
        diskFailed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool disk_failed = 7;</code>
       */
      public Builder clearDiskFailed() {
        bitField0_ = (bitField0_ & ~0x00000040);
        diskFailed_ = false;
        onChanged();
        return this;
      }

      private long netSize_ ;
      /**
       * <code>required uint64 net_size = 8;</code>
       */
      public boolean hasNetSize() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required uint64 net_size = 8;</code>
       */
      public long getNetSize() {
        return netSize_;
      }
      /**
       * <code>required uint64 net_size = 8;</code>
       */
      public Builder setNetSize(long value) {
        bitField0_ |= 0x00000080;
        netSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 net_size = 8;</code>
       */
      public Builder clearNetSize() {
        bitField0_ = (bitField0_ & ~0x00000080);
        netSize_ = 0L;
        onChanged();
        return this;
      }

      private long grossSize_ ;
      /**
       * <code>required uint64 gross_size = 9;</code>
       */
      public boolean hasGrossSize() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required uint64 gross_size = 9;</code>
       */
      public long getGrossSize() {
        return grossSize_;
      }
      /**
       * <code>required uint64 gross_size = 9;</code>
       */
      public Builder setGrossSize(long value) {
        bitField0_ |= 0x00000100;
        grossSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 gross_size = 9;</code>
       */
      public Builder clearGrossSize() {
        bitField0_ = (bitField0_ & ~0x00000100);
        grossSize_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.linbit.linstor.proto.VlmState)
    }

    // @@protoc_insertion_point(class_scope:com.linbit.linstor.proto.VlmState)
    private static final com.linbit.linstor.proto.VlmStateOuterClass.VlmState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.linbit.linstor.proto.VlmStateOuterClass.VlmState();
    }

    public static com.linbit.linstor.proto.VlmStateOuterClass.VlmState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<VlmState>
        PARSER = new com.google.protobuf.AbstractParser<VlmState>() {
      public VlmState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new VlmState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<VlmState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<VlmState> getParserForType() {
      return PARSER;
    }

    public com.linbit.linstor.proto.VlmStateOuterClass.VlmState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_linbit_linstor_proto_VlmState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_linbit_linstor_proto_VlmState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024proto/VlmState.proto\022\030com.linbit.linst" +
      "or.proto\"\301\001\n\010VlmState\022\016\n\006vlm_nr\030\001 \002(\021\022\024\n" +
      "\014vlm_minor_nr\030\002 \002(\021\022\022\n\nis_present\030\003 \002(\010\022" +
      "\020\n\010has_disk\030\004 \002(\010\022\025\n\rhas_meta_data\030\005 \002(\010" +
      "\022\027\n\017check_meta_data\030\006 \002(\010\022\023\n\013disk_failed" +
      "\030\007 \002(\010\022\020\n\010net_size\030\010 \002(\004\022\022\n\ngross_size\030\t" +
      " \002(\004"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_linbit_linstor_proto_VlmState_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_linbit_linstor_proto_VlmState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_linbit_linstor_proto_VlmState_descriptor,
        new java.lang.String[] { "VlmNr", "VlmMinorNr", "IsPresent", "HasDisk", "HasMetaData", "CheckMetaData", "DiskFailed", "NetSize", "GrossSize", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
