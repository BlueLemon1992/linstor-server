/*
 * This file was autogenerated by genproperties.py
 *
 * LINSTOR - management of distributed storage/DRBD9 resources
 * Copyright (C) 2017 - 2018  LINBIT HA-Solutions GmbH
 * Author: Rene Peinthor, Gabor Hernadi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.linbit.linstor.api.prop;


import com.linbit.linstor.api.prop.PropsWhitelist.LinStorObject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public final class GeneratedPropertyRules
{
    public static List<Property> getWhitelistedProperties()
    {
        List<Property> propertyList = new ArrayList<>();
        propertyList.add(
            new PropertyBuilder()
                .name("minor_nr_range")
                .info("Minor volume number range")
                .type("regex")
                .value("[0-9]+-[0-9]+")
                .key("KEY_MINOR_NR_RANGE")
                .build()
            );
        propertyList.add(
            new PropertyBuilder()
                .name("preferred_nic")
                .info("Preferred network interface to use")
                .type("regex")
                .value("[a-zA-Z0-9]+")
                .key("KEY_STOR_POOL_PREF_NIC")
                .build()
            );
        propertyList.add(
            new PropertyBuilder()
                .name("stordriver_thinpool")
                .internal("True")
                .type("regex")
                .value("[a-zA-Z]+")
                .key("NAMESPC_STORAGE_DRIVER", "KEY_STOR_POOL_THIN_POOL")
                .build()
            );
        propertyList.add(
            new PropertyBuilder()
                .name("tcp_port_range")
                .info("TCP port range for resource allocation")
                .type("regex")
                .value("[0-9]+-[0-9]+")
                .key("KEY_TCP_PORT_RANGE")
                .build()
            );
        propertyList.add(
            new PropertyBuilder()
                .name("stordriver_zpool")
                .internal("True")
                .type("regex")
                .value("[a-zA-Z]+")
                .key("NAMESPC_STORAGE_DRIVER", "KEY_STOR_POOL_ZPOOL")
                .build()
            );
        propertyList.add(
            new PropertyBuilder()
                .name("storage_pool_name")
                .internal("True")
                .type("regex")
                .value("[a-zA-Z]+")
                .key("KEY_STOR_POOL_NAME")
                .build()
            );
        propertyList.add(
            new PropertyBuilder()
                .name("stordriver_volumegroup")
                .internal("True")
                .type("regex")
                .value("[a-zA-Z]+")
                .key("NAMESPC_STORAGE_DRIVER", "KEY_STOR_POOL_VOLUME_GROUP")
                .build()
            );
        return propertyList;
    }

    public static Map<LinStorObject, List<String>> getWhitelistedRules()
    {
        Map<LinStorObject, List<String>> rules = new TreeMap<>();
        rules.put(LinStorObject.NODE, Collections.emptyList());
        rules.put(LinStorObject.RESOURCE_DEFINITION, Collections.emptyList());
        rules.put(LinStorObject.RESOURCE,
            Arrays.asList(
                "storage_pool_name",
                "preferred_nic"
            )
        );
        rules.put(LinStorObject.VOLUME_DEFINITION, Collections.emptyList());
        rules.put(LinStorObject.CONTROLLER,
            Arrays.asList(
                "tcp_port_range",
                "minor_nr_range"
            )
        );
        rules.put(LinStorObject.STORAGEPOOL,
            Arrays.asList(
                "stordriver_volumegroup",
                "stordriver_thinpool",
                "stordriver_zpool",
                "preferred_nic"
            )
        );
        rules.put(LinStorObject.STORAGEPOOL_DEFINITION, Collections.emptyList());
        return rules;
    }
}

