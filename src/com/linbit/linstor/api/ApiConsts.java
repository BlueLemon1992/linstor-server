/*
 * This file was autogenerated by genconsts.py
 * 
 * LINSTOR - management of distributed storage/DRBD9 resources
 * Copyright (C) 2017 - 2017  LINBIT HA-Solutions GmbH
 * Author: Robert Altnoeder, Roland Kammerer, Gabor Hernadi
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.linbit.linstor.api;

public class ApiConsts
{
    /*
     * Mask for return codes that describe an error
     */
    public static final long MASK_ERROR = 0xC000000000000000L;

    /*
     * Mask for return codes that describe a warning
     */
    public static final long MASK_WARN = 0x8000000000000000L;

    /*
     * Mask for return codes that describe contain detail information
     * about the result of an operation
     */
    public static final long MASK_INFO = 0x4000000000000000L;
    public static final long MASK_SUCCESS = 0x0000000000000000L;

    /*
     * The next 4 significant bits are reserved for type (Node, ResDfn, Res,
     * VolDfn, Vol, NetInterface, ...)
     */
    public static final long MASK_NODE = 0x3C00000000000000L;
    public static final long MASK_RSC_DFN = 0x3800000000000000L;
    public static final long MASK_RSC = 0x3400000000000000L;
    public static final long MASK_VLM_DFN = 0x3000000000000000L;
    public static final long MASK_VLM = 0x2C00000000000000L;
    public static final long MASK_NODE_CONN = 0x2800000000000000L;
    public static final long MASK_RSC_CONN = 0x2400000000000000L;
    public static final long MASK_VLM_CONN = 0x2000000000000000L;
    public static final long MASK_NET_IF = 0x1C00000000000000L;
    public static final long MASK_STOR_POOL_DFN = 0x1800000000000000L;
    public static final long MASK_STOR_POOL = 0x1400000000000000L;

    /*
     * unused type masks:
     * 0x10_00000000000000L;
     * 0x0C_00000000000000L;
     * 0x08_00000000000000L;
     * 0x04_00000000000000L;
     */

    /*
     * Codes 1-9: success
     */
    public static final long CREATED = 1 | MASK_SUCCESS;
    public static final long DELETED = 2 | MASK_SUCCESS;

    /*
     * Codes 10-99: special cases (like "failed to delete non existent data")
     */
    public static final long CRT_FAIL_IMPL_ERROR = 10 | MASK_ERROR;
    public static final long DEL_NOT_FOUND = 11 | MASK_WARN;

    /*
     * Codes 100-199: creation failures
     */

    /*
     * Codes 100-109: sql creation failures
     */
    public static final long CRT_FAIL_SQL = 100 | MASK_ERROR;
    public static final long CRT_FAIL_SQL_ROLLBACK = 101 | MASK_ERROR;

    /*
     * Codes 110-129: invalid * creation failures
     */
    public static final long CRT_FAIL_INVLD_NODE_NAME = 110 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_NODE_TYPE = 111 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_RSC_NAME = 112 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_RSC_PORT = 113 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_NODE_ID = 114 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_VLM_NR = 115 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_VLM_SIZE = 116 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_MINOR_NR = 117 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_STOR_POOL_NAME = 118 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_NET_NAME = 119 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_NET_ADDR = 120 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_NET_PORT = 121 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_NET_TYPE = 122 | MASK_ERROR;
    public static final long CRT_FAIL_INVLD_PROP = 123 | MASK_ERROR;

    /*
     * Codes 130-149: dependency not found creation failures
     */
    public static final long CRT_FAIL_NOT_FOUND_NODE = 130 | MASK_ERROR;
    public static final long CRT_FAIL_NOT_FOUND_RSC_DFN = 131 | MASK_ERROR;
    public static final long CRT_FAIL_NOT_FOUND_RSC = 132 | MASK_ERROR;
    public static final long CRT_FAIL_NOT_FOUND_VLM_DFN = 133 | MASK_ERROR;
    public static final long CRT_FAIL_NOT_FOUND_VLM = 134 | MASK_ERROR;
    public static final long CRT_FAIL_NOT_FOUND_NET_IF = 135 | MASK_ERROR;
    public static final long CRT_FAIL_NOT_FOUND_NODE_CONN = 136 | MASK_ERROR;
    public static final long CRT_FAIL_NOT_FOUND_RSC_CONN = 137 | MASK_ERROR;
    public static final long CRT_FAIL_NOT_FOUND_VLM_CONN = 138 | MASK_ERROR;
    public static final long CRT_FAIL_NOT_FOUND_STOR_POOL_DFN = 139 | MASK_ERROR;
    public static final long CRT_FAIL_NOT_FOUND_STOR_POOL = 140 | MASK_ERROR;
    public static final long CRT_FAIL_NOT_FOUND_DFLT_STOR_POOL = 141 | MASK_ERROR;

    /*
     * Codes 150-159: access denied creation failures
     */
    public static final long CRT_FAIL_ACC_DENIED_NODE = 150 | MASK_ERROR;
    public static final long CRT_FAIL_ACC_DENIED_RSC_DFN = 151 | MASK_ERROR;
    public static final long CRT_FAIL_ACC_DENIED_RSC = 152 | MASK_ERROR;
    public static final long CRT_FAIL_ACC_DENIED_VLM_DFN = 153 | MASK_ERROR;
    public static final long CRT_FAIL_ACC_DENIED_VLM = 154 | MASK_ERROR;
    public static final long CRT_FAIL_ACC_DENIED_STOR_POOL_DFN = 155 | MASK_ERROR;
    public static final long CRT_FAIL_ACC_DENIED_STOR_POOL = 156 | MASK_ERROR;
    public static final long CRT_FAIL_ACC_DENIED_NODE_CONN = 157 | MASK_ERROR;
    public static final long CRT_FAIL_ACC_DENIED_RSC_CONN = 158 | MASK_ERROR;
    public static final long CRT_FAIL_ACC_DENIED_VLM_CONN = 159 | MASK_ERROR;

    /*
     * Codes 160-179: data already exists creation failures
     */
    public static final long CRT_FAIL_EXISTS_NODE = 160 | MASK_ERROR;
    public static final long CRT_FAIL_EXISTS_RSC_DFN = 161 | MASK_ERROR;
    public static final long CRT_FAIL_EXISTS_RSC = 162 | MASK_ERROR;
    public static final long CRT_FAIL_EXISTS_VLM_DFN = 163 | MASK_ERROR;
    public static final long CRT_FAIL_EXISTS_VLM = 164 | MASK_ERROR;
    public static final long CRT_FAIL_EXISTS_NET_IF = 165 | MASK_ERROR;
    public static final long CRT_FAIL_EXISTS_NODE_CONN = 166 | MASK_ERROR;
    public static final long CRT_FAIL_EXISTS_RSC_CONN = 167 | MASK_ERROR;
    public static final long CRT_FAIL_EXISTS_VLM_CONN = 168 | MASK_ERROR;
    public static final long CRT_FAIL_EXISTS_STOR_POOL_DFN = 169 | MASK_ERROR;
    public static final long CRT_FAIL_EXISTS_STOR_POOL = 170 | MASK_ERROR;
    public static final long CRT_FAIL_MISSING_PROPS = 180 | MASK_ERROR;
    public static final long CRT_FAIL_MISSING_PROPS_NETCOM_TYPE = 181 | MASK_ERROR;
    public static final long CRT_FAIL_MISSING_PROPS_NETCOM_PORT = 182 | MASK_ERROR;
    public static final long CRT_FAIL_MISSING_NETCOM = 183 | MASK_ERROR;
    public static final long CRT_FAIL_UNKNOWN_ERROR = 197 | MASK_ERROR;

    /*
     * Codes 200-299: creation warnings
     */
    public static final long CRT_WARN_INVLD_OPT_PROP_NETCOM_ENABLED = 200 | MASK_WARN;
    public static final long CRT_WARN_NOT_CONNECTED = 201 | MASK_WARN;

    /*
     * Codes 300-399: deletion failures
     * sub-codes same as for creation failures, except data exists, which can only yield in IMPL_ERROR
     */
    public static final long DEL_FAIL_SQL = 300 | MASK_ERROR;
    public static final long DEL_FAIL_SQL_ROLLBACK = 301 | MASK_ERROR;
    public static final long DEL_FAIL_INVLD_NODE_NAME = 310 | MASK_ERROR;
    public static final long DEL_FAIL_INVLD_NODE_TYPE = 311 | MASK_ERROR;
    public static final long DEL_FAIL_INVLD_RSC_NAME = 312 | MASK_ERROR;
    public static final long DEL_FAIL_INVLD_NODE_ID = 313 | MASK_ERROR;
    public static final long DEL_FAIL_INVLD_VLM_NR = 314 | MASK_ERROR;
    public static final long DEL_FAIL_INVLD_VLM_SIZE = 315 | MASK_ERROR;
    public static final long DEL_FAIL_INVLD_MINOR_NR = 316 | MASK_ERROR;
    public static final long DEL_FAIL_INVLD_STOR_POOL_NAME = 317 | MASK_ERROR;
    public static final long DEL_FAIL_INVLD_NET_NAME = 318 | MASK_ERROR;
    public static final long DEL_FAIL_NOT_FOUND_NODE = 330 | MASK_ERROR;
    public static final long DEL_FAIL_NOT_FOUND_RSC_DFN = 331 | MASK_ERROR;
    public static final long DEL_FAIL_NOT_FOUND_RSC = 332 | MASK_ERROR;
    public static final long DEL_FAIL_NOT_FOUND_VLM_DFN = 333 | MASK_ERROR;
    public static final long DEL_FAIL_NOT_FOUND_VLM = 334 | MASK_ERROR;
    public static final long DEL_FAIL_NOT_FOUND_NET_IF = 335 | MASK_ERROR;
    public static final long DEL_FAIL_NOT_FOUND_NODE_CONN = 336 | MASK_ERROR;
    public static final long DEL_FAIL_NOT_FOUND_RSC_CONN = 337 | MASK_ERROR;
    public static final long DEL_FAIL_NOT_FOUND_VLM_CONN = 338 | MASK_ERROR;
    public static final long DEL_FAIL_NOT_FOUND_STOR_POOL_DFN = 339 | MASK_ERROR;
    public static final long DEL_FAIL_NOT_FOUND_STOR_POOL = 340 | MASK_ERROR;
    public static final long DEL_FAIL_ACC_DENIED_NODE = 350 | MASK_ERROR;
    public static final long DEL_FAIL_ACC_DENIED_RSC_DFN = 351 | MASK_ERROR;
    public static final long DEL_FAIL_ACC_DENIED_RSC = 352 | MASK_ERROR;
    public static final long DEL_FAIL_ACC_DENIED_VLM_DFN = 353 | MASK_ERROR;
    public static final long DEL_FAIL_ACC_DENIED_VLM = 354 | MASK_ERROR;
    public static final long DEL_FAIL_ACC_DENIED_STOR_POOL_DFN = 355 | MASK_ERROR;
    public static final long DEL_FAIL_ACC_DENIED_STOR_POOL = 356 | MASK_ERROR;
    public static final long DEL_FAIL_ACC_DENIED_NODE_CONN = 357 | MASK_ERROR;
    public static final long DEL_FAIL_ACC_DENIED_RSC_CONN = 358 | MASK_ERROR;
    public static final long DEL_FAIL_ACC_DENIED_VLM_CONN = 359 | MASK_ERROR;
    public static final long DEL_FAIL_EXISTS_VLM = 364 | MASK_ERROR;
    public static final long DEL_FAIL_UNKNOWN_ERROR = 397 | MASK_ERROR;
    public static final long DEL_FAIL_IN_USE = 398 | MASK_ERROR;
    public static final long DEL_FAIL_IMPL_ERROR = 399 | MASK_ERROR;

    /*
     * Codes 400-499: deletion warnings
     */
    public static final long DEL_WARN_NOT_CONNECTED = 400 | MASK_WARN;

    /*
     * Sign in codes
     */
    public static final long RC_SIGNIN_PASS = 500 | MASK_SUCCESS;
    public static final long RC_SIGNIN_FAIL = 500 | MASK_ERROR;

    /*
     * Node return codes
     */
    public static final long RC_NODE_CREATED = MASK_NODE | CREATED;
    public static final long RC_NODE_DELETED = MASK_NODE | DELETED;
    public static final long RC_NODE_DEL_NOT_FOUND = MASK_NODE | DEL_NOT_FOUND;
    public static final long RC_NODE_CRT_FAIL_SQL = MASK_NODE | CRT_FAIL_SQL;
    public static final long RC_NODE_CRT_FAIL_SQL_ROLLBACK = MASK_NODE | CRT_FAIL_SQL_ROLLBACK;
    public static final long RC_NODE_CRT_FAIL_INVLD_NODE_NAME = MASK_NODE | CRT_FAIL_INVLD_NODE_NAME;
    public static final long RC_NODE_CRT_FAIL_INVLD_NODE_TYPE = MASK_NODE | CRT_FAIL_INVLD_NODE_TYPE;
    public static final long RC_NODE_CRT_FAIL_INVLD_NET_ADDR = MASK_NODE | CRT_FAIL_INVLD_NET_ADDR;
    public static final long RC_NODE_CRT_FAIL_INVLD_NET_PORT = MASK_NODE | CRT_FAIL_INVLD_NET_PORT;
    public static final long RC_NODE_CRT_FAIL_INVLD_NET_TYPE = MASK_NODE | CRT_FAIL_INVLD_NET_TYPE;
    public static final long RC_NODE_CRT_FAIL_INVLD_NET_NAME = MASK_NODE | CRT_FAIL_INVLD_NET_NAME;
    public static final long RC_NODE_CRT_FAIL_INVLD_PROP = MASK_NODE | CRT_FAIL_INVLD_PROP;
    public static final long RC_NODE_CRT_FAIL_EXISTS_NODE = MASK_NODE | CRT_FAIL_EXISTS_NODE;
    public static final long RC_NODE_CRT_FAIL_EXISTS_NET_IF = MASK_NODE | CRT_FAIL_EXISTS_NET_IF;
    public static final long RC_NODE_CRT_FAIL_MISSING_PROPS = MASK_NODE | CRT_FAIL_MISSING_PROPS;
    public static final long RC_NODE_CRT_FAIL_MISSING_PROP_NETCOM_TYPE = MASK_NODE | CRT_FAIL_MISSING_PROPS_NETCOM_TYPE;
    public static final long RC_NODE_CRT_FAIL_MISSING_PROP_NETCOM_PORT = MASK_NODE | CRT_FAIL_MISSING_PROPS_NETCOM_PORT;
    public static final long RC_NODE_CRT_FAIL_MISSING_NETCOM = MASK_NODE | CRT_FAIL_MISSING_NETCOM;
    public static final long RC_NODE_CRT_FAIL_ACC_DENIED_NODE = MASK_NODE | CRT_FAIL_ACC_DENIED_NODE;
    public static final long RC_NODE_CRT_FAIL_UNKNOWN_ERROR = MASK_NODE | CRT_FAIL_UNKNOWN_ERROR;
    public static final long RC_NODE_CRT_FAIL_IMPL_ERROR = MASK_NODE | CRT_FAIL_IMPL_ERROR;
    public static final long RC_NODE_CRT_WARN_INVLD_OPT_PROP_NETCOM_ENABLED = MASK_NODE | CRT_WARN_INVLD_OPT_PROP_NETCOM_ENABLED;
    public static final long RC_NODE_DEL_FAIL_SQL = MASK_NODE | DEL_FAIL_SQL;
    public static final long RC_NODE_DEL_FAIL_SQL_ROLLBACK = MASK_NODE | DEL_FAIL_SQL_ROLLBACK;
    public static final long RC_NODE_DEL_FAIL_INVLD_NODE_NAME = MASK_NODE | DEL_FAIL_INVLD_NODE_NAME;
    public static final long RC_NODE_DEL_FAIL_EXISTS_VLM = MASK_NODE | DEL_FAIL_EXISTS_VLM;
    public static final long RC_NODE_DEL_FAIL_ACC_DENIED_NODE = MASK_NODE | DEL_FAIL_ACC_DENIED_NODE;
    public static final long RC_NODE_DEL_FAIL_UNKNOWN_ERROR = MASK_NODE | DEL_FAIL_UNKNOWN_ERROR;
    public static final long RC_NODE_DEL_FAIL_IMPL_ERROR = MASK_NODE | DEL_FAIL_IMPL_ERROR;

    /*
     * ResourceDefinition return codes
     */
    public static final long RC_RSC_DFN_CREATED = MASK_RSC_DFN | CREATED;
    public static final long RC_RSC_DFN_DELETED = MASK_RSC_DFN | DELETED;
    public static final long RC_RSC_DFN_DEL_NOT_FOUND = MASK_RSC_DFN | DEL_NOT_FOUND;
    public static final long RC_RSC_DFN_CRT_FAIL_INVLD_RSC_NAME = MASK_RSC_DFN | CRT_FAIL_INVLD_RSC_NAME;
    public static final long RC_RSC_DFN_CRT_FAIL_INVLD_RSC_PORT = MASK_RSC_DFN | CRT_FAIL_INVLD_RSC_PORT;
    public static final long RC_RSC_DFN_CRT_FAIL_INVLD_VLM_NR = MASK_RSC_DFN | CRT_FAIL_INVLD_VLM_NR;
    public static final long RC_RSC_DFN_CRT_FAIL_INVLD_MINOR_NR = MASK_RSC_DFN | CRT_FAIL_INVLD_MINOR_NR;
    public static final long RC_RSC_DFN_CRT_FAIL_INVLD_VLM_SIZE = MASK_RSC_DFN | CRT_FAIL_INVLD_VLM_SIZE;
    public static final long RC_RSC_DFN_CRT_FAIL_SQL = MASK_RSC_DFN | CRT_FAIL_SQL;
    public static final long RC_RSC_DFN_CRT_FAIL_SQL_ROLLBACK = MASK_RSC_DFN | CRT_FAIL_SQL_ROLLBACK;
    public static final long RC_RSC_DFN_CRT_FAIL_ACC_DENIED_RSC_DFN = MASK_RSC_DFN | CRT_FAIL_ACC_DENIED_RSC_DFN;
    public static final long RC_RSC_DFN_CRT_FAIL_ACC_DENIED_VLM_DFN = MASK_RSC_DFN | CRT_FAIL_ACC_DENIED_VLM_DFN;
    public static final long RC_RSC_DFN_CRT_FAIL_EXISTS_RSC_DFN = MASK_RSC_DFN | CRT_FAIL_EXISTS_RSC_DFN;
    public static final long RC_RSC_DFN_CRT_FAIL_EXISTS_VLM_DFN = MASK_RSC_DFN | CRT_FAIL_EXISTS_VLM_DFN;
    public static final long RC_RSC_DFN_CRT_FAIL_UNKNOWN_ERROR = MASK_RSC_DFN | CRT_FAIL_UNKNOWN_ERROR;
    public static final long RC_RSC_DFN_DEL_FAIL_INVLD_RSC_NAME = MASK_RSC_DFN | DEL_FAIL_INVLD_RSC_NAME;
    public static final long RC_RSC_DFN_DEL_FAIL_SQL = MASK_RSC_DFN | DEL_FAIL_SQL;
    public static final long RC_RSC_DFN_DEL_FAIL_SQL_ROLLBACK = MASK_RSC_DFN | DEL_FAIL_SQL_ROLLBACK;
    public static final long RC_RSC_DFN_DEL_FAIL_ACC_DENIED_RSC_DFN = MASK_RSC_DFN | DEL_FAIL_ACC_DENIED_RSC_DFN;
    public static final long RC_RSC_DFN_DEL_FAIL_UNKNOWN_ERROR = MASK_RSC_DFN | DEL_FAIL_UNKNOWN_ERROR;
    public static final long RC_RSC_DFN_DEL_FAIL_IMPL_ERROR = MASK_RSC_DFN | DEL_FAIL_IMPL_ERROR;

    /*
     * Resource return codes
     */
    public static final long RC_RSC_CREATED = MASK_RSC | CREATED;
    public static final long RC_RSC_DELETED = MASK_RSC | DELETED;
    public static final long RC_RSC_CRT_WARN_NOT_CONNECTED = MASK_RSC | CRT_WARN_NOT_CONNECTED;
    public static final long RC_RSC_DEL_NOT_FOUND = MASK_RSC | DEL_NOT_FOUND;
    public static final long RC_RSC_DEL_WARN_NOT_CONNECTED = MASK_RSC | DEL_WARN_NOT_CONNECTED;
    public static final long RC_RSC_CRT_FAIL_SQL = MASK_RSC | CRT_FAIL_SQL;
    public static final long RC_RSC_CRT_FAIL_SQL_ROLLBACK = MASK_RSC | CRT_FAIL_SQL_ROLLBACK;
    public static final long RC_RSC_CRT_FAIL_INVLD_NODE_NAME = MASK_RSC | CRT_FAIL_INVLD_NODE_NAME;
    public static final long RC_RSC_CRT_FAIL_INVLD_RSC_NAME = MASK_RSC | CRT_FAIL_INVLD_RSC_NAME;
    public static final long RC_RSC_CRT_FAIL_INVLD_NODE_ID = MASK_RSC | CRT_FAIL_INVLD_NODE_ID;
    public static final long RC_RSC_CRT_FAIL_INVLD_VLM_NR = MASK_RSC | CRT_FAIL_INVLD_VLM_NR;
    public static final long RC_RSC_CRT_FAIL_INVLD_STOR_POOL_NAME = MASK_RSC | CRT_FAIL_INVLD_STOR_POOL_NAME;
    public static final long RC_RSC_CRT_FAIL_NOT_FOUND_NODE = MASK_RSC | CRT_FAIL_NOT_FOUND_NODE;
    public static final long RC_RSC_CRT_FAIL_NOT_FOUND_RSC_DFN = MASK_RSC | CRT_FAIL_NOT_FOUND_RSC_DFN;
    public static final long RC_RSC_CRT_FAIL_NOT_FOUND_STOR_POOL_DFN = MASK_RSC | CRT_FAIL_NOT_FOUND_STOR_POOL_DFN;
    public static final long RC_RSC_CRT_FAIL_NOT_FOUND_STOR_POOL = MASK_RSC | CRT_FAIL_NOT_FOUND_STOR_POOL;
    public static final long RC_RSC_CRT_FAIL_NOT_FOUND_DFLT_STOR_POOL = MASK_RSC | CRT_FAIL_NOT_FOUND_DFLT_STOR_POOL;
    public static final long RC_RSC_CRT_FAIL_NOT_FOUND_VLM_DFN = MASK_RSC | CRT_FAIL_NOT_FOUND_VLM_DFN;
    public static final long RC_RSC_CRT_FAIL_ACC_DENIED_NODE = MASK_RSC | CRT_FAIL_ACC_DENIED_NODE;
    public static final long RC_RSC_CRT_FAIL_ACC_DENIED_RSC_DFN = MASK_RSC | CRT_FAIL_ACC_DENIED_RSC_DFN;
    public static final long RC_RSC_CRT_FAIL_ACC_DENIED_RSC = MASK_RSC | CRT_FAIL_ACC_DENIED_RSC;
    public static final long RC_RSC_CRT_FAIL_ACC_DENIED_VLM_DFN = MASK_RSC | CRT_FAIL_ACC_DENIED_VLM_DFN;
    public static final long RC_RSC_CRT_FAIL_ACC_DENIED_VLM = MASK_RSC | CRT_FAIL_ACC_DENIED_VLM;
    public static final long RC_RSC_CRT_FAIL_ACC_DENIED_STOR_POOL_DFN = MASK_RSC | CRT_FAIL_ACC_DENIED_STOR_POOL_DFN;
    public static final long RC_RSC_CRT_FAIL_ACC_DENIED_STOR_POOL = MASK_RSC | CRT_FAIL_ACC_DENIED_STOR_POOL;
    public static final long RC_RSC_CRT_FAIL_EXISTS_NODE = MASK_RSC | CRT_FAIL_EXISTS_NODE;
    public static final long RC_RSC_CRT_FAIL_EXISTS_RSC = MASK_RSC | CRT_FAIL_EXISTS_RSC;
    public static final long RC_RSC_CRT_FAIL_UNKNOWN_ERROR = MASK_RSC | CRT_FAIL_UNKNOWN_ERROR;
    public static final long RC_RSC_CRT_FAIL_IMPL_ERROR = MASK_RSC | CRT_FAIL_IMPL_ERROR;
    public static final long RC_RSC_DEL_FAIL_SQL = MASK_RSC | DEL_FAIL_SQL;
    public static final long RC_RSC_DEL_FAIL_SQL_ROLLBACK = MASK_RSC | DEL_FAIL_SQL_ROLLBACK;
    public static final long RC_RSC_DEL_FAIL_INVLD_NODE_NAME = MASK_RSC | DEL_FAIL_INVLD_NODE_NAME;
    public static final long RC_RSC_DEL_FAIL_INVLD_RSC_NAME = MASK_RSC | DEL_FAIL_INVLD_RSC_NAME;
    public static final long RC_RSC_DEL_FAIL_NOT_FOUND_NODE = MASK_RSC | DEL_FAIL_NOT_FOUND_NODE;
    public static final long RC_RSC_DEL_FAIL_NOT_FOUND_RSC_DFN = MASK_RSC | DEL_FAIL_NOT_FOUND_RSC_DFN;
    public static final long RC_RSC_DEL_FAIL_ACC_DENIED_NODE = MASK_RSC | DEL_FAIL_ACC_DENIED_NODE;
    public static final long RC_RSC_DEL_FAIL_ACC_DENIED_RSC_DFN = MASK_RSC | DEL_FAIL_ACC_DENIED_RSC_DFN;
    public static final long RC_RSC_DEL_FAIL_ACC_DENIED_RSC = MASK_RSC | DEL_FAIL_ACC_DENIED_RSC;
    public static final long RC_RSC_DEL_FAIL_ACC_DENIED_VLM_DFN = MASK_RSC | DEL_FAIL_ACC_DENIED_VLM_DFN;
    public static final long RC_RSC_DEL_FAIL_UNKNOWN_ERROR = MASK_RSC | DEL_FAIL_UNKNOWN_ERROR;
    public static final long RC_RSC_DEL_FAIL_IMPL_ERROR = MASK_RSC | DEL_FAIL_IMPL_ERROR;

    /*
     * VolumeDefinition return codes
     */
    public static final long RC_VLM_DFN_CREATED = MASK_VLM_DFN | CREATED;
    public static final long RC_VLM_DFN_DELETED = MASK_VLM_DFN | DELETED;
    public static final long RC_VLM_DFN_CRT_FAIL_SQL = MASK_VLM_DFN | CRT_FAIL_SQL;
    public static final long RC_VLM_DFN_CRT_FAIL_SQL_ROLLBACK = MASK_VLM_DFN | CRT_FAIL_SQL_ROLLBACK;
    public static final long RC_VLM_DFN_CRT_FAIL_INVLD_RSC_NAME = MASK_VLM_DFN | CRT_FAIL_INVLD_RSC_NAME;
    public static final long RC_VLM_DFN_CRT_FAIL_INVLD_STOR_POOL_NAME = MASK_VLM_DFN | CRT_FAIL_INVLD_STOR_POOL_NAME;
    public static final long RC_VLM_DFN_CRT_FAIL_INVLD_VLM_NR = MASK_VLM_DFN | CRT_FAIL_INVLD_VLM_NR;
    public static final long RC_VLM_DFN_CRT_FAIL_INVLD_MINOR_NR = MASK_VLM_DFN | CRT_FAIL_INVLD_MINOR_NR;
    public static final long RC_VLM_DFN_CRT_FAIL_INVLD_SIZE = MASK_VLM_DFN | CRT_FAIL_INVLD_VLM_SIZE;
    public static final long RC_VLM_DFN_CRT_FAIL_ACC_DENIED_RSC_DFN = MASK_VLM_DFN | CRT_FAIL_ACC_DENIED_RSC_DFN;
    public static final long RC_VLM_DFN_CRT_FAIL_ACC_DENIED_VLM_DFN = MASK_VLM_DFN | CRT_FAIL_ACC_DENIED_VLM_DFN;
    public static final long RC_VLM_DFN_CRT_FAIL_EXISTS_VLM_DFN = MASK_VLM_DFN | CRT_FAIL_EXISTS_VLM_DFN;
    public static final long RC_VLM_DFN_CRT_FAIL_IMPL_ERROR = MASK_VLM_DFN | CRT_FAIL_IMPL_ERROR;

    /*
     * Volume return codes
     */
    public static final long RC_VLM_CREATED = MASK_VLM | CREATED;
    public static final long RC_VLM_DELETED = MASK_VLM | DELETED;

    /*
     * NodeConnection return codes
     */
    public static final long RC_NODE_CONN_CREATED = MASK_NODE_CONN | CREATED;
    public static final long RC_NODE_CONN_DELETED = MASK_NODE_CONN | DELETED;
    public static final long RC_NODE_CONN_DEL_NOT_FOUND = MASK_NODE_CONN | DEL_NOT_FOUND;
    public static final long RC_NODE_CONN_CRT_FAIL_SQL = MASK_NODE_CONN | CRT_FAIL_SQL;
    public static final long RC_NODE_CONN_CRT_FAIL_SQL_ROLLBACK = MASK_NODE_CONN | CRT_FAIL_SQL_ROLLBACK;
    public static final long RC_NODE_CONN_CRT_FAIL_NOT_FOUND_NODE = MASK_NODE_CONN | CRT_FAIL_NOT_FOUND_NODE;
    public static final long RC_NODE_CONN_CRT_FAIL_INVLD_NODE_NAME = MASK_NODE_CONN | CRT_FAIL_INVLD_NODE_NAME;
    public static final long RC_NODE_CONN_CRT_FAIL_ACC_DENIED_NODE = MASK_NODE_CONN | CRT_FAIL_ACC_DENIED_NODE;
    public static final long RC_NODE_CONN_CRT_FAIL_ACC_DENIED_NODE_CONN = MASK_NODE_CONN | CRT_FAIL_ACC_DENIED_NODE_CONN;
    public static final long RC_NODE_CONN_CRT_FAIL_EXISTS_NODE_CONN = MASK_NODE_CONN | CRT_FAIL_EXISTS_NODE_CONN;
    public static final long RC_NODE_CONN_CRT_FAIL_UNKNOWN_ERROR = MASK_NODE_CONN | CRT_FAIL_UNKNOWN_ERROR;
    public static final long RC_NODE_CONN_CRT_FAIL_IMPL_ERROR = MASK_NODE_CONN | CRT_FAIL_IMPL_ERROR;
    public static final long RC_NODE_CONN_DEL_FAIL_SQL = MASK_NODE_CONN | DEL_FAIL_SQL;
    public static final long RC_NODE_CONN_DEL_FAIL_SQL_ROLLBACK = MASK_NODE_CONN | DEL_FAIL_SQL_ROLLBACK;
    public static final long RC_NODE_CONN_DEL_FAIL_NOT_FOUND_NODE = MASK_NODE_CONN | DEL_FAIL_NOT_FOUND_NODE;
    public static final long RC_NODE_CONN_DEL_FAIL_INVLD_NODE_NAME = MASK_NODE_CONN | DEL_FAIL_INVLD_NODE_NAME;
    public static final long RC_NODE_CONN_DEL_FAIL_ACC_DENIED_NODE = MASK_NODE_CONN | DEL_FAIL_ACC_DENIED_NODE;
    public static final long RC_NODE_CONN_DEL_FAIL_ACC_DENIED_NODE_CONN = MASK_NODE_CONN | DEL_FAIL_ACC_DENIED_NODE_CONN;
    public static final long RC_NODE_CONN_DEL_FAIL_UNKNOWN_ERROR = MASK_NODE_CONN | DEL_FAIL_UNKNOWN_ERROR;
    public static final long RC_NODE_CONN_DEL_FAIL_IMPL_ERROR = MASK_NODE_CONN | DEL_FAIL_IMPL_ERROR;

    /*
     * ResourceConnection return codes
     */
    public static final long RC_RSC_CONN_CREATED = MASK_RSC_CONN | CREATED;
    public static final long RC_RSC_CONN_DELETED = MASK_RSC_CONN | DELETED;
    public static final long RC_RSC_CONN_DEL_NOT_FOUND = MASK_RSC_CONN | DEL_NOT_FOUND;
    public static final long RC_RSC_CONN_CRT_FAIL_SQL = MASK_RSC_CONN | CRT_FAIL_SQL;
    public static final long RC_RSC_CONN_CRT_FAIL_SQL_ROLLBACK = MASK_RSC_CONN | CRT_FAIL_SQL_ROLLBACK;
    public static final long RC_RSC_CONN_CRT_FAIL_NOT_FOUND_NODE = MASK_RSC_CONN | CRT_FAIL_NOT_FOUND_NODE;
    public static final long RC_RSC_CONN_CRT_FAIL_NOT_FOUND_RSC_DFN = MASK_RSC_CONN | CRT_FAIL_NOT_FOUND_RSC_DFN;
    public static final long RC_RSC_CONN_CRT_FAIL_NOT_FOUND_RSC = MASK_RSC_CONN | CRT_FAIL_NOT_FOUND_RSC;
    public static final long RC_RSC_CONN_CRT_FAIL_INVLD_NODE_NAME = MASK_RSC_CONN | CRT_FAIL_INVLD_NODE_NAME;
    public static final long RC_RSC_CONN_CRT_FAIL_INVLD_RSC_NAME = MASK_RSC_CONN | CRT_FAIL_INVLD_RSC_NAME;
    public static final long RC_RSC_CONN_CRT_FAIL_ACC_DENIED_NODE = MASK_RSC_CONN | CRT_FAIL_ACC_DENIED_NODE;
    public static final long RC_RSC_CONN_CRT_FAIL_ACC_DENIED_RSC_DFN = MASK_RSC_CONN | CRT_FAIL_ACC_DENIED_RSC_DFN;
    public static final long RC_RSC_CONN_CRT_FAIL_ACC_DENIED_RSC = MASK_RSC_CONN | CRT_FAIL_ACC_DENIED_RSC;
    public static final long RC_RSC_CONN_CRT_FAIL_ACC_DENIED_RSC_CONN = MASK_RSC_CONN | CRT_FAIL_ACC_DENIED_RSC_CONN;
    public static final long RC_RSC_CONN_CRT_FAIL_EXISTS_RSC_CONN = MASK_RSC_CONN | CRT_FAIL_EXISTS_RSC_CONN;
    public static final long RC_RSC_CONN_CRT_FAIL_UNKNOWN_ERROR = MASK_RSC_CONN | CRT_FAIL_UNKNOWN_ERROR;
    public static final long RC_RSC_CONN_CRT_FAIL_IMPL_ERROR = MASK_RSC_CONN | CRT_FAIL_IMPL_ERROR;
    public static final long RC_RSC_CONN_DEL_FAIL_SQL = MASK_RSC_CONN | DEL_FAIL_SQL;
    public static final long RC_RSC_CONN_DEL_FAIL_SQL_ROLLBACK = MASK_RSC_CONN | DEL_FAIL_SQL_ROLLBACK;
    public static final long RC_RSC_CONN_DEL_FAIL_NOT_FOUND_NODE = MASK_RSC_CONN | DEL_FAIL_NOT_FOUND_NODE;
    public static final long RC_RSC_CONN_DEL_FAIL_NOT_FOUND_RSC_DFN = MASK_RSC_CONN | DEL_FAIL_NOT_FOUND_RSC_DFN;
    public static final long RC_RSC_CONN_DEL_FAIL_NOT_FOUND_RSC = MASK_RSC_CONN | DEL_FAIL_NOT_FOUND_RSC;
    public static final long RC_RSC_CONN_DEL_FAIL_INVLD_NODE_NAME = MASK_RSC_CONN | DEL_FAIL_INVLD_NODE_NAME;
    public static final long RC_RSC_CONN_DEL_FAIL_INVLD_RSC_NAME = MASK_RSC_CONN | DEL_FAIL_INVLD_RSC_NAME;
    public static final long RC_RSC_CONN_DEL_FAIL_ACC_DENIED_NODE = MASK_RSC_CONN | DEL_FAIL_ACC_DENIED_NODE;
    public static final long RC_RSC_CONN_DEL_FAIL_ACC_DENIED_RSC_DFN = MASK_RSC_CONN | DEL_FAIL_ACC_DENIED_RSC_DFN;
    public static final long RC_RSC_CONN_DEL_FAIL_ACC_DENIED_RSC = MASK_RSC_CONN | DEL_FAIL_ACC_DENIED_RSC;
    public static final long RC_RSC_CONN_DEL_FAIL_ACC_DENIED_RSC_CONN = MASK_RSC_CONN | DEL_FAIL_ACC_DENIED_RSC_CONN;
    public static final long RC_RSC_CONN_DEL_FAIL_UNKNOWN_ERROR = MASK_RSC_CONN | DEL_FAIL_UNKNOWN_ERROR;
    public static final long RC_RSC_CONN_DEL_FAIL_IMPL_ERROR = MASK_RSC_CONN | DEL_FAIL_IMPL_ERROR;

    /*
     * VolumeConnection return codes
     */
    public static final long RC_VLM_CONN_CREATED = MASK_VLM_CONN | CREATED;
    public static final long RC_VLM_CONN_DELETED = MASK_VLM_CONN | DELETED;
    public static final long RC_VLM_CONN_DEL_NOT_FOUND = MASK_VLM_CONN | DEL_NOT_FOUND;
    public static final long RC_VLM_CONN_CRT_FAIL_SQL = MASK_VLM_CONN | CRT_FAIL_SQL;
    public static final long RC_VLM_CONN_CRT_FAIL_SQL_ROLLBACK = MASK_VLM_CONN | CRT_FAIL_SQL_ROLLBACK;
    public static final long RC_VLM_CONN_CRT_FAIL_NOT_FOUND_NODE = MASK_VLM_CONN | CRT_FAIL_NOT_FOUND_NODE;
    public static final long RC_VLM_CONN_CRT_FAIL_NOT_FOUND_RSC_DFN = MASK_VLM_CONN | CRT_FAIL_NOT_FOUND_RSC_DFN;
    public static final long RC_VLM_CONN_CRT_FAIL_NOT_FOUND_RSC = MASK_VLM_CONN | CRT_FAIL_NOT_FOUND_RSC;
    public static final long RC_VLM_CONN_CRT_FAIL_NOT_FOUND_VLM_DFN = MASK_VLM_CONN | CRT_FAIL_NOT_FOUND_VLM_DFN;
    public static final long RC_VLM_CONN_CRT_FAIL_NOT_FOUND_VLM = MASK_VLM_CONN | CRT_FAIL_NOT_FOUND_VLM;
    public static final long RC_VLM_CONN_CRT_FAIL_INVLD_NODE_NAME = MASK_VLM_CONN | CRT_FAIL_INVLD_NODE_NAME;
    public static final long RC_VLM_CONN_CRT_FAIL_INVLD_RSC_NAME = MASK_VLM_CONN | CRT_FAIL_INVLD_RSC_NAME;
    public static final long RC_VLM_CONN_CRT_FAIL_INVLD_VLM_NR = MASK_VLM_CONN | CRT_FAIL_INVLD_VLM_NR;
    public static final long RC_VLM_CONN_CRT_FAIL_ACC_DENIED_NODE = MASK_VLM_CONN | CRT_FAIL_ACC_DENIED_NODE;
    public static final long RC_VLM_CONN_CRT_FAIL_ACC_DENIED_RSC_DFN = MASK_VLM_CONN | CRT_FAIL_ACC_DENIED_RSC_DFN;
    public static final long RC_VLM_CONN_CRT_FAIL_ACC_DENIED_RSC = MASK_VLM_CONN | CRT_FAIL_ACC_DENIED_RSC;
    public static final long RC_VLM_CONN_CRT_FAIL_ACC_DENIED_VLM_DFN = MASK_VLM_CONN | CRT_FAIL_ACC_DENIED_VLM_DFN;
    public static final long RC_VLM_CONN_CRT_FAIL_ACC_DENIED_VLM = MASK_VLM_CONN | CRT_FAIL_ACC_DENIED_VLM;
    public static final long RC_VLM_CONN_CRT_FAIL_ACC_DENIED_VLM_CONN = MASK_VLM_CONN | CRT_FAIL_ACC_DENIED_VLM_CONN;
    public static final long RC_VLM_CONN_CRT_FAIL_EXISTS_VLM_CONN = MASK_VLM_CONN | CRT_FAIL_EXISTS_VLM_CONN;
    public static final long RC_VLM_CONN_CRT_FAIL_UNKNOWN_ERROR = MASK_VLM_CONN | CRT_FAIL_UNKNOWN_ERROR;
    public static final long RC_VLM_CONN_CRT_FAIL_IMPL_ERROR = MASK_VLM_CONN | CRT_FAIL_IMPL_ERROR;
    public static final long RC_VLM_CONN_DEL_FAIL_SQL = MASK_VLM_CONN | DEL_FAIL_SQL;
    public static final long RC_VLM_CONN_DEL_FAIL_SQL_ROLLBACK = MASK_VLM_CONN | DEL_FAIL_SQL_ROLLBACK;
    public static final long RC_VLM_CONN_DEL_FAIL_NOT_FOUND_NODE = MASK_VLM_CONN | DEL_FAIL_NOT_FOUND_NODE;
    public static final long RC_VLM_CONN_DEL_FAIL_NOT_FOUND_RSC_DFN = MASK_VLM_CONN | DEL_FAIL_NOT_FOUND_RSC_DFN;
    public static final long RC_VLM_CONN_DEL_FAIL_NOT_FOUND_RSC = MASK_VLM_CONN | DEL_FAIL_NOT_FOUND_RSC;
    public static final long RC_VLM_CONN_DEL_FAIL_NOT_FOUND_VLM_DFN = MASK_VLM_CONN | DEL_FAIL_NOT_FOUND_VLM_DFN;
    public static final long RC_VLM_CONN_DEL_FAIL_NOT_FOUND_VLM = MASK_VLM_CONN | DEL_FAIL_NOT_FOUND_VLM;
    public static final long RC_VLM_CONN_DEL_FAIL_INVLD_NODE_NAME = MASK_VLM_CONN | DEL_FAIL_INVLD_NODE_NAME;
    public static final long RC_VLM_CONN_DEL_FAIL_INVLD_RSC_NAME = MASK_VLM_CONN | DEL_FAIL_INVLD_RSC_NAME;
    public static final long RC_VLM_CONN_DEL_FAIL_INVLD_VLM_NR = MASK_VLM_CONN | DEL_FAIL_INVLD_VLM_NR;
    public static final long RC_VLM_CONN_DEL_FAIL_ACC_DENIED_NODE = MASK_VLM_CONN | DEL_FAIL_ACC_DENIED_NODE;
    public static final long RC_VLM_CONN_DEL_FAIL_ACC_DENIED_RSC_DFN = MASK_VLM_CONN | DEL_FAIL_ACC_DENIED_RSC_DFN;
    public static final long RC_VLM_CONN_DEL_FAIL_ACC_DENIED_RSC = MASK_VLM_CONN | DEL_FAIL_ACC_DENIED_RSC;
    public static final long RC_VLM_CONN_DEL_FAIL_ACC_DENIED_VLM_DFN = MASK_VLM_CONN | DEL_FAIL_ACC_DENIED_VLM_DFN;
    public static final long RC_VLM_CONN_DEL_FAIL_ACC_DENIED_VLM = MASK_VLM_CONN | DEL_FAIL_ACC_DENIED_VLM;
    public static final long RC_VLM_CONN_DEL_FAIL_ACC_DENIED_VLM_CONN = MASK_VLM_CONN | DEL_FAIL_ACC_DENIED_VLM_CONN;
    public static final long RC_VLM_CONN_DEL_FAIL_UNKNOWN_ERROR = MASK_VLM_CONN | DEL_FAIL_UNKNOWN_ERROR;
    public static final long RC_VLM_CONN_DEL_FAIL_IMPL_ERROR = MASK_VLM_CONN | DEL_FAIL_IMPL_ERROR;

    /*
     * NetInterface return codes
     */
    public static final long RC_NET_IF_CREATED = MASK_NET_IF | CREATED;
    public static final long RC_NET_IF_DELETED = MASK_NET_IF | DELETED;

    /*
     * StorPoolDefinition return codes
     */
    public static final long RC_STOR_POOL_DFN_CREATED = MASK_STOR_POOL_DFN | CREATED;
    public static final long RC_STOR_POOL_DFN_DELETED = MASK_STOR_POOL_DFN | DELETED;
    public static final long RC_STOR_POOL_DFN_DEL_NOT_FOUND = MASK_STOR_POOL_DFN | DEL_NOT_FOUND;
    public static final long RC_STOR_POOL_DFN_CRT_FAIL_SQL = MASK_STOR_POOL_DFN | CRT_FAIL_SQL;
    public static final long RC_STOR_POOL_DFN_CRT_FAIL_SQL_ROLLBACK = MASK_STOR_POOL_DFN | CRT_FAIL_SQL_ROLLBACK;
    public static final long RC_STOR_POOL_DFN_CRT_FAIL_INVLD_STOR_POOL_NAME = MASK_STOR_POOL_DFN | CRT_FAIL_INVLD_STOR_POOL_NAME;
    public static final long RC_STOR_POOL_DFN_CRT_FAIL_ACC_DENIED_STOR_POOL_DFN = MASK_STOR_POOL_DFN | CRT_FAIL_ACC_DENIED_STOR_POOL_DFN;
    public static final long RC_STOR_POOL_DFN_CRT_FAIL_EXISTS_STOR_POOL_DFN = MASK_STOR_POOL_DFN | CRT_FAIL_EXISTS_STOR_POOL_DFN;
    public static final long RC_STOR_POOL_DFN_CRT_FAIL_UNKNOWN_ERROR = MASK_STOR_POOL_DFN | CRT_FAIL_UNKNOWN_ERROR;
    public static final long RC_STOR_POOL_DFN_DEL_FAIL_SQL = MASK_STOR_POOL_DFN | DEL_FAIL_SQL;
    public static final long RC_STOR_POOL_DFN_DEL_FAIL_SQL_ROLLBACK = MASK_STOR_POOL_DFN | DEL_FAIL_SQL_ROLLBACK;
    public static final long RC_STOR_POOL_DFN_DEL_FAIL_INVLD_STOR_POOL_NAME = MASK_STOR_POOL_DFN | DEL_FAIL_INVLD_STOR_POOL_NAME;
    public static final long RC_STOR_POOL_DFN_DEL_FAIL_ACC_DENIED_STOR_POOL_DFN = MASK_STOR_POOL_DFN | DEL_FAIL_ACC_DENIED_STOR_POOL_DFN;
    public static final long RC_STOR_POOL_DFN_DEL_FAIL_IMPL_ERROR = MASK_STOR_POOL_DFN | DEL_FAIL_IMPL_ERROR;
    public static final long RC_STOR_POOL_DFN_DEL_FAIL_UNKNOWN_ERROR = MASK_STOR_POOL_DFN | DEL_FAIL_UNKNOWN_ERROR;

    /*
     * StorPool return codes
     */
    public static final long RC_STOR_POOL_CREATED = MASK_STOR_POOL | CREATED;
    public static final long RC_STOR_POOL_DELETED = MASK_STOR_POOL | DELETED;
    public static final long RC_STOR_POOL_CRT_WARN_NOT_CONNECTED = MASK_STOR_POOL | CRT_WARN_NOT_CONNECTED;
    public static final long RC_STOR_POOL_DEL_NOT_FOUND = MASK_STOR_POOL | DEL_NOT_FOUND;
    public static final long RC_STOR_POOL_DEL_WARN_NOT_CONNECTED = MASK_STOR_POOL | DEL_WARN_NOT_CONNECTED;
    public static final long RC_STOR_POOL_CRT_FAIL_SQL = MASK_STOR_POOL | CRT_FAIL_SQL;
    public static final long RC_STOR_POOL_CRT_FAIL_SQL_ROLLBACK = MASK_STOR_POOL | CRT_FAIL_SQL_ROLLBACK;
    public static final long RC_STOR_POOL_CRT_FAIL_NOT_FOUND_NODE = MASK_STOR_POOL | CRT_FAIL_NOT_FOUND_NODE;
    public static final long RC_STOR_POOL_CRT_FAIL_NOT_FOUND_STOR_POOL_DFN = MASK_STOR_POOL | CRT_FAIL_NOT_FOUND_STOR_POOL_DFN;
    public static final long RC_STOR_POOL_CRT_FAIL_INVLD_NODE_NAME = MASK_STOR_POOL | CRT_FAIL_INVLD_NODE_NAME;
    public static final long RC_STOR_POOL_CRT_FAIL_INVLD_STOR_POOL_NAME = MASK_STOR_POOL | CRT_FAIL_INVLD_STOR_POOL_NAME;
    public static final long RC_STOR_POOL_CRT_FAIL_ACC_DENIED_NODE = MASK_STOR_POOL | CRT_FAIL_ACC_DENIED_NODE;
    public static final long RC_STOR_POOL_CRT_FAIL_ACC_DENIED_STOR_POOL_DFN = MASK_STOR_POOL | CRT_FAIL_ACC_DENIED_STOR_POOL_DFN;
    public static final long RC_STOR_POOL_CRT_FAIL_ACC_DENIED_STOR_POOL = MASK_STOR_POOL | CRT_FAIL_ACC_DENIED_STOR_POOL;
    public static final long RC_STOR_POOL_CRT_FAIL_EXISTS_STOR_POOL = MASK_STOR_POOL | CRT_FAIL_EXISTS_STOR_POOL;
    public static final long RC_STOR_POOL_CRT_FAIL_UNKNOWN_ERROR = MASK_STOR_POOL | CRT_FAIL_UNKNOWN_ERROR;
    public static final long RC_STOR_POOL_CRT_FAIL_IMPL_ERROR = MASK_STOR_POOL | CRT_FAIL_IMPL_ERROR;
    public static final long RC_STOR_POOL_DEL_FAIL_SQL = MASK_STOR_POOL | DEL_FAIL_SQL;
    public static final long RC_STOR_POOL_DEL_FAIL_SQL_ROLLBACK = MASK_STOR_POOL | DEL_FAIL_SQL_ROLLBACK;
    public static final long RC_STOR_POOL_DEL_FAIL_NOT_FOUND_NODE = MASK_STOR_POOL | DEL_FAIL_NOT_FOUND_NODE;
    public static final long RC_STOR_POOL_DEL_FAIL_NOT_FOUND_STOR_POOL_DFN = MASK_STOR_POOL | DEL_FAIL_NOT_FOUND_STOR_POOL_DFN;
    public static final long RC_STOR_POOL_DEL_FAIL_INVLD_STOR_POOL_NAME = MASK_STOR_POOL | DEL_FAIL_INVLD_STOR_POOL_NAME;
    public static final long RC_STOR_POOL_DEL_FAIL_INVLD_NODE_NAME = MASK_STOR_POOL | DEL_FAIL_INVLD_NODE_NAME;
    public static final long RC_STOR_POOL_DEL_FAIL_ACC_DENIED_NODE = MASK_STOR_POOL | DEL_FAIL_ACC_DENIED_NODE;
    public static final long RC_STOR_POOL_DEL_FAIL_ACC_DENIED_STOR_POOL_DFN = MASK_STOR_POOL | DEL_FAIL_ACC_DENIED_STOR_POOL_DFN;
    public static final long RC_STOR_POOL_DEL_FAIL_ACC_DENIED_STOR_POOL = MASK_STOR_POOL | DEL_FAIL_ACC_DENIED_STOR_POOL;
    public static final long RC_STOR_POOL_DEL_FAIL_IN_USE = MASK_STOR_POOL | DEL_FAIL_IN_USE;
    public static final long RC_STOR_POOL_DEL_FAIL_UNKNOWN_ERROR = MASK_STOR_POOL | DEL_FAIL_UNKNOWN_ERROR;
    public static final long RC_STOR_POOL_DEL_FAIL_IMPL_ERROR = MASK_STOR_POOL | DEL_FAIL_IMPL_ERROR;

    /*
     * API Keys
     */
    public static final String API_REPLY = "Reply";

    /*
     * Create object APIs
     */
    public static final String API_CRT_NODE = "CrtNode";
    public static final String API_CRT_RSC = "CrtRsc";
    public static final String API_CRT_RSC_DFN = "CrtRscDfn";
    public static final String API_CRT_NET_IF = "CrtNetIf";
    public static final String API_CRT_VLM_DFN = "CrtVlmDfn";
    public static final String API_CRT_SNPSHT = "CrtSnpsht";
    public static final String API_CRT_STOR_POOL_DFN = "CrtStorPoolDfn";
    public static final String API_CRT_STOR_POOL = "CrtStorPool";
    public static final String API_CRT_NODE_CONN = "CrtNodeConn";
    public static final String API_CRT_RSC_CONN = "CrtRscConn";
    public static final String API_CRT_VLM_CONN = "CrtVlmConn";

    /*
     * Modify object APIs
     */
    public static final String API_MFY_NODE = "MfyNode";
    public static final String API_MFY_RSC = "MfyRsc";
    public static final String API_MFY_RSC_DFN = "MfyRscDfn";
    public static final String API_MFY_NET_IF = "MfyNetIf";
    public static final String API_MFY_VLM_DFN = "MfyVlmDfn";
    public static final String API_MFY_SNPSHT = "MfySnpsht";

    /*
     * Delete object APIs
     */
    public static final String API_DEL_NODE = "DelNode";
    public static final String API_DEL_RSC = "DelRsc";
    public static final String API_DEL_RSC_DFN = "DelRscDfn";
    public static final String API_DEL_NET_IF = "DelNetIf";
    public static final String API_DEL_VLM_DFN = "DelVlmDfn";
    public static final String API_DEL_STOR_POOL_DFN = "DelStorPoolDfn";
    public static final String API_DEL_STOR_POOL = "DelStorPool";
    public static final String API_DEL_NODE_CONN = "DelNodeConn";
    public static final String API_DEL_RSC_CONN = "DelRscConn";
    public static final String API_DEL_VLM_CONN = "DelVlmConn";
    public static final String API_DEL_SNPSHT = "DelSnpsht";
    public static final String API_RST_SNPSHT = "RstSnpsht";
    public static final String API_AUTO_DPLY_RSC = "AutoDplyRsc";
    public static final String API_LOST_NODE = "LostNode";
    public static final String API_CHK_STATE = "ChkState";

    /*
     * Authentication APIs
     */
    public static final String API_SIGN_IN = "SignIn";

    /*
     * Debug APIs
     */
    public static final String API_CRT_DBG_CNSL = "CrtDbgCnsl";
    public static final String API_DSTR_DBG_CNSL = "DstrDbgCnsl";

    /*
     * List object APIs
     */
    public static final String API_LST_NODE = "LstNode";
    public static final String API_LST_RSC = "LstRsc";
    public static final String API_LST_RSC_DFN = "LstRscDfn";
    public static final String API_LST_NET_IF = "LstNetIf";
    public static final String API_LST_VLM_DFN = "LstVlmDfn";
    public static final String API_LST_VLM = "LstVlm";
    public static final String API_LST_SNPSHT = "LstSnpsht";
    public static final String API_LST_STOR_POOL = "LstStorPool";

    /*
     * Subscription APIs
     */
    public static final String API_CRT_SUBSCR = "CrtSubscr";
    public static final String API_DEL_SUBSCR = "DelSubscr";
    public static final String API_RPT_SPC = "RptSpc";
    public static final String API_PING = "Ping";
    public static final String API_PONG = "Pong";
    public static final String API_MOD_INF = "ModInf";
    public static final String API_VSN_INF = "VsnInf";
    public static final String API_SET_CFG_VAL = "SetCfgVal";
    public static final String API_DEL_CFG_VAL = "DelCfgVal";
    public static final String API_LST_CFG_VAL = "LstCfgVal";
    public static final String API_SHTDWN = "Shtdwn";

    /*
     * Object property keys
     */
    public static final String KEY_UUID = "UUID";
    public static final String KEY_NODE = "Node";
    public static final String KEY_RSC_DFN = "RscDfn";
    public static final String KEY_STOR_POOL_DFN = "StorPoolDfn";
    public static final String KEY_1ST_NODE = "FirstNode";
    public static final String KEY_2ND_NODE = "SecondNode";
    public static final String KEY_NODE_NAME = "NodeName";
    public static final String KEY_NODE_TYPE = "NodeType";
    public static final String KEY_NODE_FLAGS = "NodeFlags";
    public static final String KEY_NODE_ID = "NodeId";
    public static final String KEY_1ST_NODE_NAME = "FirstNodeName";
    public static final String KEY_2ND_NODE_NAME = "SecondNodeName";
    public static final String KEY_RSC_NAME = "RscName";
    public static final String KEY_STOR_POOL_NAME = "StorPoolName";
    public static final String KEY_NET_IF_NAME = "NetIfName";
    public static final String KEY_SNPSHT_NAME = "SnpshtName";
    public static final String KEY_VLM_NR = "VlmNr";
    public static final String KEY_VLM_SIZE = "VlmSize";
    public static final String KEY_MINOR_NR = "MinorNr";
    public static final String KEY_PEER_COUNT = "PeerCount";
    public static final String KEY_AL_SIZE = "AlSize";
    public static final String KEY_AL_STRIPES = "AlStripes";
    public static final String KEY_ID = "ID";
    public static final String KEY_ROLE = "Role";
    public static final String KEY_MISSING_NAMESPC = "MissingNameSpace";

    /*
     * Property namespaces
     */
    public static final String NAMESPC_NETCOM = "NetCom";
    public static final String NAMESPC_DFLT = "Default";
    public static final String NAMESPC_LOGGING = "Logging";
    public static final String NAMESPC_ALLOC = "Allocation";
    public static final String NAMESPC_NETIF = "NetIf";

    /*
     * Property keys
     */
    public static final String KEY_PORT_NR = "PortNr";
    public static final String KEY_IP_ADDR = "IPAddr";
    public static final String KEY_BIND_ADDR = "BindAddr";
    public static final String KEY_NETCOM_TYPE = "NetComType";
    public static final String KEY_NETIF_TYPE = "NetIfType";
    public static final String KEY_NETCOM_ENABLED = "NetComEnabled";
    public static final String KEY_KEYSTORE = "Keystore";
    public static final String KEY_TRUSTSTORE = "Truststore";
    public static final String KEY_KEY_PWD = "KeyPwd";
    public static final String KEY_KEYSTORE_PWD = "KeystorePwd";
    public static final String KEY_TRUSTSTORE_PWD = "TruststorePwd";
    public static final String KEY_SSL_PROTO = "SslProto";

    /*
     * Property values
     */
    public static final String VAL_NETCOM_TYPE_SSL = "SSL";
    public static final String VAL_NETCOM_TYPE_PLAIN = "Plain";
    public static final String VAL_SSL_PROTO_TLSv1 = "TLSv1";

    /*
     * Node Type values
     */
    public static final String VAL_NODE_TYPE_CTRL = "Controller";
    public static final String VAL_NODE_TYPE_STLT = "Satellite";
    public static final String VAL_NODE_TYPE_CMBD = "Combined";
    public static final String VAL_NODE_TYPE_AUX = "Auxiliary";

    /*
     * Net interface Type values
     */
    public static final String VAL_NETIF_TYPE_IP = "IP";
    public static final String VAL_NETIF_TYPE_RDMA = "RDMA";
    public static final String VAL_NETIF_TYPE_ROCE = "RoCE";

    /*
     * Authentication keys
     */
    public static final String KEY_SEC_IDENTITY = "SecIdentity";
    public static final String KEY_SEC_ROLE = "SecRole";
    public static final String KEY_SEC_TYPE = "SecType";
    public static final String KEY_SEC_DOMAIN = "SecDomain";
    public static final String KEY_SEC_PASSWORD = "SecPassword";

    /*
     * Default ports
     */
    public static final int DFLT_CTRL_PORT_SSL = 3377;
    public static final int DFLT_CTRL_PORT_PLAIN = 3376;
    public static final int DFLT_STLT_PORT_PLAIN = 3366;

    /*
     * Boolean values
     */
    public static final String VAL_TRUE = "True";
    public static final String VAL_FALSE = "False";
}
