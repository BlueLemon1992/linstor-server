import java.text.SimpleDateFormat
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.NoSuchFileException;
import org.gradle.process.internal.ExecException

plugins {
    id "nebula.ospackage" version "4.6.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'nebula.ospackage-base'

sourceCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
        resources {
            srcDirs = ["generated-resources"]
        }
    }
    test {
        java {
            srcDirs = ["test"]
        }
    }
}

repositories
{
    mavenCentral()

    flatDir {
       dirs 'libs'
    }
}

dependencies
{
    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
    compile group: 'com.google.inject.extensions', name: 'guice-multibindings', version: '4.1.0'

    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.2.0'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.2.0'
    compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.5.0'
    compile 'info.picocli:picocli:2.3.0'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    compile group: 'org.apache.derby', name: 'derby',       version: '10.14.1.0'
    compile group: 'org.apache.derby', name: 'derbyclient', version: '10.14.1.0'
    compile group: 'org.apache.derby', name: 'derbynet',    version: '10.14.1.0'
//    compile group: 'org.apache.derby', name: 'derbytools',  version: '10.14.1.0'

    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.powermock', name: 'powermock-mockito-release-full', version: '1.6.4'

    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.9.0'
    testCompile group: 'pl.pragmatists', name: 'JUnitParams', version: '1.1.1'

    testCompile group: 'com.google.inject.extensions', name: 'guice-testlib', version: '4.1.0'
}

processResources {
    from('sql-src/drbd-init-derby.sql') { into '/resource' }
}

mainClassName = 'com.linbit.linstor.core.Controller'
jar {
  manifest {
    attributes(
      'Main-Class': mainClassName
    )
  }
}

/////////////////////////// Version Info ///////////////////////////
task versionInfo() {
    String propsFile = "$projectDir/generated-resources/version-info.properties"

    File gitFolder = file("$projectDir/.git")
    if (gitFolder.exists())
    {
        try {
            def stdOut = new ByteArrayOutputStream()
            def stdErr = new ByteArrayOutputStream()
            project.exec {
                commandLine 'make', 'versioninfo'
                standardOutput = stdOut
                errorOutput = stdErr
            }
        } catch (ExecException exc) {
            throw new RuntimeException("Cannot generate version.", exc)
        }
    }

    if (project.hasProperty('versionOverride')) {
        logger.warn("Overriding version with $versionOverride")
        version = versionOverride
    } else {
        Properties props = new Properties()
        try {
            props.load(new FileInputStream(propsFile))
        } catch (Exception exc) {
            throw new RuntimeException("Cannot read version.", exc)
        }
        version = props.get("version")
    }
}

processResources.dependsOn versionInfo

/////////////////////////// Start scripts ///////////////////////////
startScripts.enabled = false

task ControllerStartup(type: CreateStartScripts) {
    mainClassName = 'com.linbit.linstor.core.Controller'
    applicationName = "Controller"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
    doLast {
        delete windowsScript
    }
}


task SatelliteStartup(type: CreateStartScripts) {
    mainClassName = 'com.linbit.linstor.core.Satellite'
    applicationName = "Satellite"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
    doLast {
        delete windowsScript
    }
}

task RecreateDbStartup(type: CreateStartScripts) {
    mainClassName = 'com.linbit.linstor.core.RecreateDb'
    applicationName = "RecreateDb"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
    doLast {
        delete windowsScript
    }
}

applicationDistribution.into("bin") {
    from(ControllerStartup)
    from(SatelliteStartup)
    from(RecreateDbStartup)
    fileMode = 0755
}

task showMeCache << {
  configurations.compile.each { println it }
}

task showMeTestCache << {
  configurations.testCompile.each { println it }
}

/////////////////////////// Test commands ///////////////////////////
task buildTestCommands(type:Exec) {
  workingDir 'test-support'

  commandLine 'make'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method buildTestCommands.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}

task cleanTestCommands(type:Exec) {
  workingDir 'test-support'

  commandLine 'make', 'clean'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method buildTestCommands.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}

compileTestJava {
  dependsOn buildTestCommands
}

clean {
  dependsOn cleanTestCommands
  delete += 'generated-resources'
}

/////////////////////////// Packaging ///////////////////////////
ospackage {
    packageName 'linstor-server'
    release '1'
    os = LINUX
    user 'root'
    packager 'LINBIT HA-Solutions GmbH <drbd-user@lists.linbit.com>'

    requires('drbd-utils', '9.2.0', GREATER | EQUAL)

    postInstall file('scripts/postinstall.sh')

    from('scripts/linstor-controller.service') {
        into '/lib/systemd/system'
        fileMode 0644
    }
    from('scripts/linstor-satellite.service') {
        into '/lib/systemd/system'
        fileMode 0644
    }

    into '/opt/linstor-server'
    from(jar.outputs.files) {
        into 'lib'
    }
    from(configurations.runtime) {
        into 'lib'
    }
    from(ControllerStartup) {
        into 'bin'
        fileMode 0550
    }
    from(SatelliteStartup) {
        into 'bin'
        fileMode 0550
    }
    from(RecreateDbStartup) {
        into 'bin'
        fileMode 0550
    }
}

// we might even split these to generate separate controller/satellite packages
buildRpm {
    requires('jre-headless', "1.8.0", GREATER | EQUAL)
    requires('lvm2')
}

buildDeb {
    requires('default-jre-headless')
    requires('thin-provisioning-tools')
}
