apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

sourceCompatibility = 1.7
version = '1.0'

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
    }
    test {
        java {
            srcDirs = ["test"]
        }
    }
}

repositories
{
    mavenCentral()

    flatDir {
       dirs 'libs'
    }
}

dependencies
{
    // compile name: 'protobuf-core'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.2.0'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.1.1'
    compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.4.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    compile group: 'org.apache.derby', name: 'derby',       version: '10.12.1.1'
    compile group: 'org.apache.derby', name: 'derbyclient', version: '10.12.1.1'
    compile group: 'org.apache.derby', name: 'derbynet',    version: '10.12.1.1'
    compile group: 'org.apache.derby', name: 'derbytools',  version: '10.12.1.1'

    testCompile group: 'junit', name: 'junit', version: '4.+'
    // testCompile group: 'org.mockito', name: 'mockito', version: '2.7.19'
    testCompile group: 'org.powermock', name: 'powermock-mockito-release-full', version: '1.6.4'
}

mainClassName = 'com.linbit.linstor.core.Controller'
jar {
  manifest {
    attributes(
      'Main-Class': mainClassName
    )
  }

  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

task moreStartScripts(type: CreateStartScripts) {
    mainClassName = 'com.linbit.linstor.core.Satellite'
    applicationName = "Satellite"
     outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into("bin") {
            from(moreStartScripts)
            fileMode = 0755
}

task showMeCache << {
  configurations.compile.each { println it }
}

task buildTestCommands(type:Exec) {
  workingDir 'test-support'

  commandLine 'make'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method buildTestCommands.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}

task cleanTestCommands(type:Exec) {
  workingDir 'test-support'

  commandLine 'make', 'clean'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method buildTestCommands.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}

compileTestJava {
  dependsOn buildTestCommands
}

clean {
  dependsOn cleanTestCommands
}
